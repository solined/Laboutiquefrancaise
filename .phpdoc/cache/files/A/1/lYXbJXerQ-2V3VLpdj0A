1646515335
AwuilbDvXz%3A2a70e7618ea37e34378e88938055df0f-af8f9817dd344b0dbf998fb92b73d6d2
s:155684:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImFmOGY5ODE3ZGQzNDRiMGRiZjk5OGZiOTJiNzNkNmQyIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6Njg6ImQ3YjYxMGI3YTk5N2I3NjU4MjI4ZTIwOGViZGM4MGZlY2Q5MjMzMTY4NTlmM2FhMzQxNDA0MGMwYmM3ZGU5MDEucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6OTA6InZhci9jYWNoZS9kZXYvdHdpZy9kNy9kN2I2MTBiN2E5OTdiNzY1ODIyOGUyMDhlYmRjODBmZWNkOTIzMzE2ODU5ZjNhYTM0MTQwNDBjMGJjN2RlOTAxLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6OTAzMTI6Ijw/cGhwCgp1c2UgVHdpZ1xFbnZpcm9ubWVudDsKdXNlIFR3aWdcRXJyb3JcTG9hZGVyRXJyb3I7CnVzZSBUd2lnXEVycm9yXFJ1bnRpbWVFcnJvcjsKdXNlIFR3aWdcRXh0ZW5zaW9uXFNhbmRib3hFeHRlbnNpb247CnVzZSBUd2lnXE1hcmt1cDsKdXNlIFR3aWdcU2FuZGJveFxTZWN1cml0eUVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZFRhZ0Vycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZpbHRlckVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZ1bmN0aW9uRXJyb3I7CnVzZSBUd2lnXFNvdXJjZTsKdXNlIFR3aWdcVGVtcGxhdGU7CgovKiBAV2ViUHJvZmlsZXIvQ29sbGVjdG9yL3JlcXVlc3QuaHRtbC50d2lnICovCmNsYXNzIF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzIgZXh0ZW5kcyBUZW1wbGF0ZQp7CiAgICBwcml2YXRlICRzb3VyY2U7CiAgICBwcml2YXRlICRtYWNyb3MgPSBbXTsKCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoRW52aXJvbm1lbnQgJGVudikKICAgIHsKICAgICAgICBwYXJlbnQ6Ol9fY29uc3RydWN0KCRlbnYpOwoKICAgICAgICAkdGhpcy0+c291cmNlID0gJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKTsKCiAgICAgICAgJHRoaXMtPmJsb2NrcyA9IFsKICAgICAgICAgICAgJ3Rvb2xiYXInID0+IFskdGhpcywgJ2Jsb2NrX3Rvb2xiYXInXSwKICAgICAgICAgICAgJ21lbnUnID0+IFskdGhpcywgJ2Jsb2NrX21lbnUnXSwKICAgICAgICAgICAgJ3BhbmVsJyA9PiBbJHRoaXMsICdibG9ja19wYW5lbCddLAogICAgICAgIF07CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGRvR2V0UGFyZW50KGFycmF5ICRjb250ZXh0KQogICAgewogICAgICAgIC8vIGxpbmUgMQogICAgICAgIHJldHVybiAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2xheW91dC5odG1sLnR3aWciOwogICAgfQoKICAgIHByb3RlY3RlZCBmdW5jdGlvbiBkb0Rpc3BsYXkoYXJyYXkgJGNvbnRleHQsIGFycmF5ICRibG9ja3MgPSBbXSkKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAidGVtcGxhdGUiLCAiQFdlYlByb2ZpbGVyL0NvbGxlY3Rvci9yZXF1ZXN0Lmh0bWwudHdpZyIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMiA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCcmlkZ2VcXFR3aWdcXEV4dGVuc2lvblxcUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5lbnRlcigkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJAV2ViUHJvZmlsZXIvQ29sbGVjdG9yL3JlcXVlc3QuaHRtbC50d2lnIikpOwoKICAgICAgICAkdGhpcy0+cGFyZW50ID0gJHRoaXMtPmxvYWRUZW1wbGF0ZSgiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2xheW91dC5odG1sLnR3aWciLCAiQFdlYlByb2ZpbGVyL0NvbGxlY3Rvci9yZXF1ZXN0Lmh0bWwudHdpZyIsIDEpOwogICAgICAgICR0aGlzLT5wYXJlbnQtPmRpc3BsYXkoJGNvbnRleHQsIGFycmF5X21lcmdlKCR0aGlzLT5ibG9ja3MsICRibG9ja3MpKTsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDMKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja190b29sYmFyKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInRvb2xiYXIiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAidG9vbGJhciIpKTsKCiAgICAgICAgLy8gbGluZSA0CiAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgJG1hY3Jvc1siaGVscGVyIl0gPSAkdGhpczsKICAgICAgICAvLyBsaW5lIDUKICAgICAgICBlY2hvICIgICAgIjsKICAgICAgICBvYl9zdGFydCgpOwogICAgICAgIC8vIGxpbmUgNgogICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICBlY2hvIHR3aWdfY2FsbF9tYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3NldF9oYW5kbGVyIiwgW3R3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb250cm9sbGVyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2KV0sIDYsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICBlY2hvICIKICAgICI7CiAgICAgICAgJGNvbnRleHRbInJlcXVlc3RfaGFuZGxlciJdID0gKCcnID09PSAkdG1wID0gb2JfZ2V0X2NsZWFuKCkpID8gJycgOiBuZXcgTWFya3VwKCR0bXAsICR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSk7CiAgICAgICAgLy8gbGluZSA4CiAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgIC8vIGxpbmUgOQogICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgOSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVkaXJlY3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTAKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICBvYl9zdGFydCgpOwogICAgICAgICAgICAvLyBsaW5lIDExCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19jYWxsX21hY3JvKCRtYWNyb3NbImhlbHBlciJdLCAibWFjcm9fc2V0X2hhbmRsZXIiLCBbdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVkaXJlY3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExKSwgImNvbnRyb2xsZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExKSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVkaXJlY3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExKSwgInJvdXRlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMSksICgoKDAgIT09IHR3aWdfY29tcGFyZSgiR0VUIiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVkaXJlY3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExKSwgIm1ldGhvZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTEpKSkpID8gKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlZGlyZWN0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMSksICJtZXRob2QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExKSkgOiAoIiIpKV0sIDExLCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJyZWRpcmVjdF9oYW5kbGVyIl0gPSAoJycgPT09ICR0bXAgPSBvYl9nZXRfY2xlYW4oKSkgPyAnJyA6IG5ldyBNYXJrdXAoJHRtcCwgJHRoaXMtPmVudi0+Z2V0Q2hhcnNldCgpKTsKICAgICAgICAgICAgLy8gbGluZSAxMwogICAgICAgICAgICBlY2hvICIgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAxNAogICAgICAgIGVjaG8gIgogICAgIjsKICAgICAgICAvLyBsaW5lIDE1CiAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZm9yd2FyZHRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNSkpIHsKICAgICAgICAgICAgLy8gbGluZSAxNgogICAgICAgICAgICBlY2hvICIgICAgICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJmb3J3YXJkX3Byb2ZpbGUiXSA9IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInByb2ZpbGUiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcm9maWxlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicHJvZmlsZSIgZG9lcyBub3QgZXhpc3QuJywgMTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNoaWxkQnlUb2tlbiIsIFswID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZm9yd2FyZHRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNildLCAibWV0aG9kIiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTYpOwogICAgICAgICAgICAvLyBsaW5lIDE3CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICAgICAgb2Jfc3RhcnQoKTsKICAgICAgICAgICAgLy8gbGluZSAxOAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgICAgICBlY2hvIHR3aWdfY2FsbF9tYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3NldF9oYW5kbGVyIiwgWygoKGlzc2V0KCRjb250ZXh0WyJmb3J3YXJkX3Byb2ZpbGUiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZm9yd2FyZF9wcm9maWxlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImZvcndhcmRfcHJvZmlsZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImZvcndhcmRfcHJvZmlsZSIgZG9lcyBub3QgZXhpc3QuJywgMTgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgPyAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImZvcndhcmRfcHJvZmlsZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJmb3J3YXJkX3Byb2ZpbGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZm9yd2FyZF9wcm9maWxlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZm9yd2FyZF9wcm9maWxlIiBkb2VzIG5vdCBleGlzdC4nLCAxOCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY29sbGVjdG9yIiwgWzAgPT4gInJlcXVlc3QiXSwgIm1ldGhvZCIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4KSwgImNvbnRyb2xsZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4KSkgOiAoIm4vYSIpKV0sIDE4LCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJmb3J3YXJkX2hhbmRsZXIiXSA9ICgnJyA9PT0gJHRtcCA9IG9iX2dldF9jbGVhbigpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgICAgICAgICAvLyBsaW5lIDIwCiAgICAgICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDIxCiAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgIC8vIGxpbmUgMjIKICAgICAgICAkY29udGV4dFsicmVxdWVzdF9zdGF0dXNfY29kZV9jb2xvciJdID0gKCgoMCA8PSB0d2lnX2NvbXBhcmUodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzdGF0dXNjb2RlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMiksIDQwMCkpKSA/ICgicmVkIikgOiAoKCgoMCA8PSB0d2lnX2NvbXBhcmUodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzdGF0dXNjb2RlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMiksIDMwMCkpKSA/ICgieWVsbG93IikgOiAoImdyZWVuIikpKSk7CiAgICAgICAgLy8gbGluZSAyMwogICAgICAgIGVjaG8gIgogICAgIjsKICAgICAgICAvLyBsaW5lIDI0CiAgICAgICAgb2Jfc3RhcnQoKTsKICAgICAgICAvLyBsaW5lIDI1CiAgICAgICAgZWNobyAiICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzIHNmLXRvb2xiYXItc3RhdHVzLSI7CiAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0X3N0YXR1c19jb2RlX2NvbG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3Rfc3RhdHVzX2NvZGVfY29sb3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdF9zdGF0dXNfY29kZV9jb2xvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3Rfc3RhdHVzX2NvZGVfY29sb3IiIGRvZXMgbm90IGV4aXN0LicsIDI1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgZWNobyAiXCI+IjsKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1c2NvZGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDI2CiAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicm91dGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI2KSkgewogICAgICAgICAgICAvLyBsaW5lIDI3CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgIGlmICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlZGlyZWN0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNykpIHsKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL0ljb24vcmVkaXJlY3Quc3ZnIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSAyOAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmb3J3YXJkdG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI4KSkgewogICAgICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvSWNvbi9mb3J3YXJkLnN2ZyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMjkKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLWxhYmVsXCI+IjsKICAgICAgICAgICAgKCgoMCAhPT0gdHdpZ19jb21wYXJlKCJHRVQiLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIm1ldGhvZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjkpKSkpID8gKHByaW50ICh0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJtZXRob2QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI5KSwgImh0bWwiLCBudWxsLCB0cnVlKSkpIDogKHByaW50ICgiIikpKTsKICAgICAgICAgICAgZWNobyAiIEA8L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci12YWx1ZSBzZi10b29sYmFyLWluZm8tcGllY2UtYWRkaXRpb25hbFwiPiI7CiAgICAgICAgICAgIC8vIGxpbmUgMzAKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyb3V0ZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzApLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAzMgogICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgICRjb250ZXh0WyJpY29uIl0gPSAoJycgPT09ICR0bXAgPSBvYl9nZXRfY2xlYW4oKSkgPyAnJyA6IG5ldyBNYXJrdXAoJHRtcCwgJHRoaXMtPmVudi0+Z2V0Q2hhcnNldCgpKTsKICAgICAgICAvLyBsaW5lIDMzCiAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgIC8vIGxpbmUgMzQKICAgICAgICBvYl9zdGFydCgpOwogICAgICAgIC8vIGxpbmUgMzUKICAgICAgICBlY2hvICIgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tZ3JvdXBcIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+SFRUUCBzdGF0dXM8L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj4iOwogICAgICAgIC8vIGxpbmUgMzgKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1c2NvZGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICIgIjsKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1c3RleHQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDQxCiAgICAgICAgaWYgKCgwICE9PSB0d2lnX2NvbXBhcmUoIkdFVCIsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA0MSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibWV0aG9kIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MSkpKSkgewogICAgICAgICAgICAvLyBsaW5lIDQyCiAgICAgICAgICAgIGVjaG8gIjxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8Yj5NZXRob2Q8L2I+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+IjsKICAgICAgICAgICAgLy8gbGluZSA0NAogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNDQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIm1ldGhvZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDQpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4iOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDQ3CiAgICAgICAgZWNobyAiCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPkNvbnRyb2xsZXI8L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj4iOwogICAgICAgIC8vIGxpbmUgNTAKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3RfaGFuZGxlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0X2hhbmRsZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdF9oYW5kbGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdF9oYW5kbGVyIiBkb2VzIG5vdCBleGlzdC4nLCA1MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5Sb3V0ZSBuYW1lPC9iPgogICAgICAgICAgICAgICAgPHNwYW4+IjsKICAgICAgICAvLyBsaW5lIDU1CiAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgInJvdXRlIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgNTUpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgInJvdXRlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1NSksICJuL2EiKSkgOiAoIm4vYSIpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+SGFzIHNlc3Npb248L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj4iOwogICAgICAgIC8vIGxpbmUgNjAKICAgICAgICBpZiAodHdpZ19sZW5ndGhfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2Vzc2lvbm1ldGFkYXRhIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2MCkpKSB7CiAgICAgICAgICAgIGVjaG8gInllcyI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZWNobyAibm8iOwogICAgICAgIH0KICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+U3RhdGVsZXNzIENoZWNrPC9iPgogICAgICAgICAgICAgICAgPHNwYW4+IjsKICAgICAgICAvLyBsaW5lIDY1CiAgICAgICAgaWYgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic3RhdGVsZXNzY2hlY2siLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDY1KSkgewogICAgICAgICAgICBlY2hvICJ5ZXMiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVjaG8gIm5vIjsKICAgICAgICB9CiAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDY5CiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoInJlZGlyZWN0X2hhbmRsZXIiLCAkY29udGV4dCkpIHsKICAgICAgICAgICAgLy8gbGluZSA3MAogICAgICAgICAgICBlY2hvICI8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLWdyb3VwXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1yZWRpcmVjdGlvbi1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMteWVsbG93XCI+IjsKICAgICAgICAgICAgLy8gbGluZSA3MwogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDczLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZWRpcmVjdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzMpLCAic3RhdHVzX2NvZGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDczKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICBSZWRpcmVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDc3CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsicmVkaXJlY3RfaGFuZGxlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZWRpcmVjdF9oYW5kbGVyIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlZGlyZWN0X2hhbmRsZXIiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZWRpcmVjdF9oYW5kbGVyIiBkb2VzIG5vdCBleGlzdC4nLCA3NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAgICAgKDxhIGhyZWY9XCIiOwogICAgICAgICAgICAvLyBsaW5lIDc4CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxSb3V0aW5nRXh0ZW5zaW9uJ10tPmdldFBhdGgoIl9wcm9maWxlciIsIFsidG9rZW4iID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlZGlyZWN0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA3OCksICJ0b2tlbiIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzgpXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlZGlyZWN0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA3OCksICJ0b2tlbiIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzgpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L2E+KQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDgzCiAgICAgICAgZWNobyAiCiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDg0CiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoImZvcndhcmRfaGFuZGxlciIsICRjb250ZXh0KSkgewogICAgICAgICAgICAvLyBsaW5lIDg1CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tZ3JvdXBcIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8Yj5Gb3J3YXJkZWQgdG88L2I+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgODkKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJmb3J3YXJkX2hhbmRsZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZm9yd2FyZF9oYW5kbGVyIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImZvcndhcmRfaGFuZGxlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImZvcndhcmRfaGFuZGxlciIgZG9lcyBub3QgZXhpc3QuJywgODksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgICAgICg8YSBocmVmPVwiIjsKICAgICAgICAgICAgLy8gbGluZSA5MAogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCcmlkZ2VcVHdpZ1xFeHRlbnNpb25cUm91dGluZ0V4dGVuc2lvbiddLT5nZXRQYXRoKCJfcHJvZmlsZXIiLCBbInRva2VuIiA9PiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgOTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZvcndhcmR0b2tlbiIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOTApXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA5MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZm9yd2FyZHRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA5MCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIjwvYT4pCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgOTUKICAgICAgICBlY2hvICIgICAgIjsKICAgICAgICAkY29udGV4dFsidGV4dCJdID0gKCcnID09PSAkdG1wID0gb2JfZ2V0X2NsZWFuKCkpID8gJycgOiBuZXcgTWFya3VwKCR0bXAsICR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSk7CiAgICAgICAgLy8gbGluZSA5NgogICAgICAgIGVjaG8gIgogICAgIjsKICAgICAgICAvLyBsaW5lIDk3CiAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdG9vbGJhcl9pdGVtLmh0bWwudHdpZyIsIFsibGluayIgPT4gKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl91cmwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZXJfdXJsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGVyX3VybCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX3VybCIgZG9lcyBub3QgZXhpc3QuJywgOTcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKV0pOwogICAgICAgIGVjaG8gIgoiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgogICAgfQoKICAgIC8vIGxpbmUgMTAwCiAgICBwdWJsaWMgZnVuY3Rpb24gYmxvY2tfbWVudSgkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5lbnRlcigkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJtZW51IikpOwoKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmVudGVyKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgIm1lbnUiKSk7CgogICAgICAgIC8vIGxpbmUgMTAxCiAgICAgICAgZWNobyAiICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj4KICAgICAgICA8c3BhbiBjbGFzcz1cImljb25cIj4iOwogICAgICAgIC8vIGxpbmUgMTAyCiAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvSWNvbi9yZXF1ZXN0LnN2ZyIpOwogICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICA8c3Ryb25nPlJlcXVlc3QgLyBSZXNwb25zZTwvc3Ryb25nPgogICAgPC9zcGFuPgoiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgogICAgfQoKICAgIC8vIGxpbmUgMTA3CiAgICBwdWJsaWMgZnVuY3Rpb24gYmxvY2tfcGFuZWwoJGNvbnRleHQsIGFycmF5ICRibG9ja3MgPSBbXSkKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicGFuZWwiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicGFuZWwiKSk7CgogICAgICAgIC8vIGxpbmUgMTA4CiAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgJG1hY3Jvc1siaGVscGVyIl0gPSAkdGhpczsKICAgICAgICAvLyBsaW5lIDEwOQogICAgICAgIGVjaG8gIgogICAgPGgyPgogICAgICAgICI7CiAgICAgICAgLy8gbGluZSAxMTEKICAgICAgICBlY2hvIHR3aWdfY2FsbF9tYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3NldF9oYW5kbGVyIiwgW3R3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbnRyb2xsZXIiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDExMSldLCAxMTEsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICBlY2hvICIKICAgIDwvaDI+CgogICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIj4KICAgICAgICA8ZGl2IGNsYXNzPVwidGFiXCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlJlcXVlc3Q8L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICA8aDM+R0VUIFBhcmFtZXRlcnM8L2gzPgoKICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAxMjEKICAgICAgICBpZiAodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTIxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0cXVlcnkiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEyMSksICJhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEyMSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTIyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIEdFVCBwYXJhbWV0ZXJzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDEyNgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEyNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdHF1ZXJ5IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMjYpLCAibWF4RGVwdGgiID0+IDFdLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAxMjgKICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxoMz5QT1NUIFBhcmFtZXRlcnM8L2gzPgoKICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAxMzEKICAgICAgICBpZiAodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTMxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0cmVxdWVzdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTMxKSwgImFsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTMxKSkpIHsKICAgICAgICAgICAgLy8gbGluZSAxMzIKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gUE9TVCBwYXJhbWV0ZXJzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDEzNgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEzNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdHJlcXVlc3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEzNiksICJtYXhEZXB0aCIgPT4gMV0sIGZhbHNlKTsKICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDEzOAogICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgPGg0PlVwbG9hZGVkIEZpbGVzPC9oND4KCiAgICAgICAgICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMTQxCiAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0ZmlsZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE0MSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTQyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIGZpbGVzIHdlcmUgdXBsb2FkZWQ8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTQ2CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZyIsIFsiYmFnIiA9PiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQ2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0ZmlsZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE0NiksICJtYXhEZXB0aCIgPT4gMV0sIGZhbHNlKTsKICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDE0OAogICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgQXR0cmlidXRlczwvaDM+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDE1MQogICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlcXVlc3RhdHRyaWJ1dGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNTEpLCAiYWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNTEpKSkgewogICAgICAgICAgICAvLyBsaW5lIDE1MgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBhdHRyaWJ1dGVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDE1NgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE1NiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdGF0dHJpYnV0ZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE1NildLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAxNTgKICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxoMz5SZXF1ZXN0IEhlYWRlcnM8L2gzPgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDE2MAogICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE2MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdGhlYWRlcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE2MCksICJsYWJlbHMiID0+IFswID0+ICJIZWFkZXIiLCAxID0+ICJWYWx1ZSJdLCAibWF4RGVwdGgiID0+IDFdLCBmYWxzZSk7CiAgICAgICAgZWNobyAiCgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgQ29udGVudDwvaDM+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDE2NAogICAgICAgIGlmICgoMCA9PT0gdHdpZ19jb21wYXJlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNjQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbnRlbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE2NCksIGZhbHNlKSkpIHsKICAgICAgICAgICAgLy8gbGluZSAxNjUKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVxdWVzdCBjb250ZW50IG5vdCBhdmFpbGFibGUgKGl0IHdhcyByZXRyaWV2ZWQgYXMgYSByZXNvdXJjZSkuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2VpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICAgICAgICAgLy8gbGluZSAxNjgKKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTY4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb250ZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNjgpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTY5CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSAxNzAKICAgICAgICAgICAgJGNvbnRleHRbInByZXR0eUpzb24iXSA9ICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE3MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaXNKc29uUmVxdWVzdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTcwKSkgPyAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE3MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicHJldHR5SnNvbiIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTcwKSkgOiAobnVsbCkpOwogICAgICAgICAgICAvLyBsaW5lIDE3MQogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICBpZiAoICEobnVsbCA9PT0gKGlzc2V0KCRjb250ZXh0WyJwcmV0dHlKc29uIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInByZXR0eUpzb24iLCAkY29udGV4dCkgPyAkY29udGV4dFsicHJldHR5SnNvbiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByZXR0eUpzb24iIGRvZXMgbm90IGV4aXN0LicsIDE3MSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAxNzIKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlByZXR0eTwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiIHN0eWxlPVwibWF4LWhlaWdodDogNTAwcHg7IG92ZXJmbG93LXk6IGF1dG87XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmUgY2xhc3M9XCJicmVhay1sb25nLXdvcmRzXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTc2CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInByZXR0eUpzb24iXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJldHR5SnNvbiIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcmV0dHlKc29uIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicHJldHR5SnNvbiIgZG9lcyBub3QgZXhpc3QuJywgMTc2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L3ByZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBsaW5lIDE4MQogICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+UmF3PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmUgY2xhc3M9XCJicmVhay1sb25nLXdvcmRzXCI+IjsKICAgICAgICAgICAgLy8gbGluZSAxODYKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4NiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY29udGVudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTg2KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9wcmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTkyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIGNvbnRlbnQ8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0KICAgICAgICAvLyBsaW5lIDE5NgogICAgICAgIGVjaG8gIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiXCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlJlc3BvbnNlPC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgPGgzPlJlc3BvbnNlIEhlYWRlcnM8L2gzPgoKICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAyMDUKICAgICAgICBlY2hvIHR3aWdfaW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnIiwgWyJiYWciID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyMDUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInJlc3BvbnNlaGVhZGVycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjA1KSwgImxhYmVscyIgPT4gWzAgPT4gIkhlYWRlciIsIDEgPT4gIlZhbHVlIl0sICJtYXhEZXB0aCIgPT4gMV0sIGZhbHNlKTsKICAgICAgICBlY2hvICIKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9XCJ0YWIgIjsKICAgICAgICAvLyBsaW5lIDIwOQogICAgICAgIGVjaG8gKCgodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjA5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0Y29va2llcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjA5KSwgImFsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjA5KSkgJiYgdHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjA5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXNwb25zZWNvb2tpZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwOSksICJhbGwiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwOSkpKSkgPyAoImRpc2FibGVkIikgOiAoIiIpKTsKICAgICAgICBlY2hvICJcIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+Q29va2llczwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIDxoMz5SZXF1ZXN0IENvb2tpZXM8L2gzPgoKICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAyMTUKICAgICAgICBpZiAodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjE1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJyZXF1ZXN0Y29va2llcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE1KSwgImFsbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE1KSkpIHsKICAgICAgICAgICAgLy8gbGluZSAyMTYKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gcmVxdWVzdCBjb29raWVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDIyMAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIyMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdGNvb2tpZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIyMCldLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAyMjIKICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxoMz5SZXNwb25zZSBDb29raWVzPC9oMz4KCiAgICAgICAgICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMjI1CiAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIyNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVzcG9uc2Vjb29raWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjUpLCAiYWxsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjUpKSkgewogICAgICAgICAgICAvLyBsaW5lIDIyNgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyByZXNwb25zZSBjb29raWVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDIzMAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIzMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVzcG9uc2Vjb29raWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzApXSwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAyMzIKICAgICAgICBlY2hvICIgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiAiOwogICAgICAgIC8vIGxpbmUgMjM1CiAgICAgICAgZWNobyAoKHR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjM1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9ubWV0YWRhdGEiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzNSkpKSA/ICgiZGlzYWJsZWQiKSA6ICgiIikpOwogICAgICAgIGVjaG8gIlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5TZXNzaW9uIjsKICAgICAgICAvLyBsaW5lIDIzNgogICAgICAgIGlmICggIXR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjM2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9udXNhZ2VzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzYpKSkgewogICAgICAgICAgICBlY2hvICIgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPiI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfbGVuZ3RoX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjM2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9udXNhZ2VzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzYpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPiI7CiAgICAgICAgfQogICAgICAgIGVjaG8gIjwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIDxoMz5TZXNzaW9uIE1ldGFkYXRhPC9oMz4KCiAgICAgICAgICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMjQxCiAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjQxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9ubWV0YWRhdGEiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI0MSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjQyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIHNlc3Npb24gbWV0YWRhdGE8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjQ2CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdGFibGUuaHRtbC50d2lnIiwgWyJkYXRhIiA9PiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjQ2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9ubWV0YWRhdGEiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI0NildLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAyNDgKICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxoMz5TZXNzaW9uIEF0dHJpYnV0ZXM8L2gzPgoKICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAyNTEKICAgICAgICBpZiAodHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyNTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInNlc3Npb25hdHRyaWJ1dGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNTEpKSkgewogICAgICAgICAgICAvLyBsaW5lIDI1MgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBzZXNzaW9uIGF0dHJpYnV0ZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjU2CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdGFibGUuaHRtbC50d2lnIiwgWyJkYXRhIiA9PiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjU2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9uYXR0cmlidXRlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU2KSwgImxhYmVscyIgPT4gWzAgPT4gIkF0dHJpYnV0ZSIsIDEgPT4gIlZhbHVlIl1dLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAyNTgKICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxoMz5TZXNzaW9uIFVzYWdlPC9oMz4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljc1wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgLy8gbGluZSAyNjMKICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI2MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2Vzc2lvbnVzYWdlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjYzKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+VXNhZ2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4iOwogICAgICAgIC8vIGxpbmUgMjY4CiAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICgoIkBXZWJQcm9maWxlci9JY29uLyIgLiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAyNjgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXRlbGVzc2NoZWNrIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNjgpKSA/ICgieWVzIikgOiAoIm5vIikpKSAuICIuc3ZnIikpOwogICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlN0YXRlbGVzcyBjaGVjayBlbmFibGVkPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDI3MwogICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI3MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2Vzc2lvbnVzYWdlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjczKSkpIHsKICAgICAgICAgICAgLy8gbGluZSAyNzQKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2Vzc2lvbiBub3QgdXNlZC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMjc4CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwic2Vzc2lvbl91c2FnZXNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJmdWxsLXdpZHRoXCI+VXNhZ2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDI4NgogICAgICAgICAgICAkY29udGV4dFsnX3BhcmVudCddID0gJGNvbnRleHQ7CiAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSB0d2lnX2Vuc3VyZV90cmF2ZXJzYWJsZSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjg2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzZXNzaW9udXNhZ2VzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyODYpKTsKICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsia2V5Il0gPT4gJGNvbnRleHRbInVzYWdlIl0pIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjg3CiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjg5CiAgICAgICAgICAgICAgICAkY29udGV4dFsibGluayJdID0gJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXENvZGVFeHRlbnNpb24nXS0+Z2V0RmlsZUxpbmsodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ1c2FnZSJdLCAiZmlsZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjg5KSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ1c2FnZSJdLCAibGluZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjg5KSk7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI5MAogICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsibGluayJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5rIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxpbmsiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJsaW5rIiBkb2VzIG5vdCBleGlzdC4nLCAyOTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIjxhIGhyZWY9XCIiOwogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsibGluayJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5rIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxpbmsiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJsaW5rIiBkb2VzIG5vdCBleGlzdC4nLCAyOTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIiB0aXRsZT1cIiI7CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ1c2FnZSJdLCAibmFtZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjkwKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlY2hvICI8c3BhbiB0aXRsZT1cIiI7CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ1c2FnZSJdLCAibmFtZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjkwKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAyOTEKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ1c2FnZSJdLCAibmFtZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjkxKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjkyCiAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJsaW5rIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImxpbmsiLCAkY29udGV4dCkgPyAkY29udGV4dFsibGluayJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxpbmsiIGRvZXMgbm90IGV4aXN0LicsIDI5MiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9hPiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAyOTMKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXNtYWxsIGZvbnQtbm9ybWFsXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAyOTQKICAgICAgICAgICAgICAgICRjb250ZXh0WyJ1c2FnZV9pZCJdID0gKCJzZXNzaW9uLXVzYWdlLXRyYWNlLSIgLiAkY29udGV4dFsia2V5Il0pOwogICAgICAgICAgICAgICAgLy8gbGluZSAyOTUKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJ0biBidG4tbGluayB0ZXh0LXNtYWxsIHNmLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlLXNlbGVjdG9yPVwiIyI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInVzYWdlX2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInVzYWdlX2lkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInVzYWdlX2lkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAidXNhZ2VfaWQiIGRvZXMgbm90IGV4aXN0LicsIDI5NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgZWNobyAiXCIgZGF0YS10b2dnbGUtYWx0LWNvbnRlbnQ9XCJIaWRlIHRyYWNlXCI+U2hvdyB0cmFjZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCIiOwogICAgICAgICAgICAgICAgLy8gbGluZSAyOTcKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsidXNhZ2VfaWQiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygidXNhZ2VfaWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsidXNhZ2VfaWQiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJ1c2FnZV9pZCIgZG9lcyBub3QgZXhpc3QuJywgMjk3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlY2hvICJcIiBjbGFzcz1cImNvbnRleHQgc2YtdG9nZ2xlLWNvbnRlbnQgc2YtdG9nZ2xlLWhpZGRlblwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjk4CiAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJ1bmRsZVxXZWJQcm9maWxlckJ1bmRsZVxUd2lnXFdlYlByb2ZpbGVyRXh0ZW5zaW9uJ10tPmR1bXBEYXRhKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidXNhZ2UiXSwgInRyYWNlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyOTgpLCAyKTsKICAgICAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgIHVuc2V0KCRjb250ZXh0Wydfc2VxJ10sICRjb250ZXh0WydfaXRlcmF0ZWQnXSwgJGNvbnRleHRbJ2tleSddLCAkY29udGV4dFsndXNhZ2UnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICRjb250ZXh0ID0gYXJyYXlfaW50ZXJzZWN0X2tleSgkY29udGV4dCwgJF9wYXJlbnQpICsgJF9wYXJlbnQ7CiAgICAgICAgICAgIC8vIGxpbmUgMzAzCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzA2CiAgICAgICAgZWNobyAiICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9XCJ0YWIgIjsKICAgICAgICAvLyBsaW5lIDMwOQogICAgICAgIGVjaG8gKCh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMwOSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmxhc2hlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzA5KSkpID8gKCJkaXNhYmxlZCIpIDogKCIiKSk7CiAgICAgICAgZWNobyAiXCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPkZsYXNoZXM8L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICA8aDM+Rmxhc2hlczwvaDM+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDMxNQogICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMxNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZmxhc2hlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzE1KSkpIHsKICAgICAgICAgICAgLy8gbGluZSAzMTYKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gZmxhc2ggbWVzc2FnZXMgd2VyZSBjcmVhdGVkLjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gbGluZSAzMjAKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICBlY2hvIHR3aWdfaW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBXZWJQcm9maWxlci9Qcm9maWxlci90YWJsZS5odG1sLnR3aWciLCBbImRhdGEiID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMjAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImZsYXNoZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMyMCldLCBmYWxzZSk7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAzMjIKICAgICAgICBlY2hvICIgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5TZXJ2ZXIgUGFyYW1ldGVyczwvaDM+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgPGgzPlNlcnZlciBQYXJhbWV0ZXJzPC9oMz4KICAgICAgICAgICAgICAgIDxoND5EZWZpbmVkIGluIC5lbnY8L2g0PgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDMzMAogICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWciLCBbImJhZyIgPT4gdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMzMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZG90ZW52dmFycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzMwKV0sIGZhbHNlKTsKICAgICAgICBlY2hvICIKCiAgICAgICAgICAgICAgICA8aDQ+RGVmaW5lZCBhcyByZWd1bGFyIGVudiB2YXJpYWJsZXM8L2g0PgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDMzMwogICAgICAgICRjb250ZXh0WyJyZXF1ZXN0c2VydmVyIl0gPSBbXTsKICAgICAgICAvLyBsaW5lIDMzNAogICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAiOwogICAgICAgICRjb250ZXh0WydfcGFyZW50J10gPSAkY29udGV4dDsKICAgICAgICAkY29udGV4dFsnX3NlcSddID0gdHdpZ19lbnN1cmVfdHJhdmVyc2FibGUodHdpZ19hcnJheV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMzNCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicmVxdWVzdHNlcnZlciIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzM0KSwgZnVuY3Rpb24gKCRfX19fXywgJF9fa2V5X18pIHVzZSAoJGNvbnRleHQsICRtYWNyb3MpIHsgJGNvbnRleHRbIl8iXSA9ICRfX19fXzsgJGNvbnRleHRbImtleSJdID0gJF9fa2V5X187IHJldHVybiAhdHdpZ19pbl9maWx0ZXIoJGNvbnRleHRbImtleSJdLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMzNCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZG90ZW52dmFycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzM0KSwgImtleXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMzNCkpOyB9KSk7CiAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsia2V5Il0gPT4gJGNvbnRleHRbInZhbHVlIl0pIHsKICAgICAgICAgICAgLy8gbGluZSAzMzUKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsicmVxdWVzdHNlcnZlciJdID0gdHdpZ19hcnJheV9tZXJnZSgoaXNzZXQoJGNvbnRleHRbInJlcXVlc3RzZXJ2ZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdHNlcnZlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0c2VydmVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdHNlcnZlciIgZG9lcyBub3QgZXhpc3QuJywgMzM1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksIFskY29udGV4dFsia2V5Il0gPT4gJGNvbnRleHRbInZhbHVlIl1dKTsKICAgICAgICAgICAgLy8gbGluZSAzMzYKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgICRfcGFyZW50ID0gJGNvbnRleHRbJ19wYXJlbnQnXTsKICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0WydrZXknXSwgJGNvbnRleHRbJ3ZhbHVlJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICRjb250ZXh0ID0gYXJyYXlfaW50ZXJzZWN0X2tleSgkY29udGV4dCwgJF9wYXJlbnQpICsgJF9wYXJlbnQ7CiAgICAgICAgLy8gbGluZSAzMzcKICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICBlY2hvIHR3aWdfaW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBXZWJQcm9maWxlci9Qcm9maWxlci90YWJsZS5odG1sLnR3aWciLCBbImRhdGEiID0+IChpc3NldCgkY29udGV4dFsicmVxdWVzdHNlcnZlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0c2VydmVyIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlcXVlc3RzZXJ2ZXIiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZXF1ZXN0c2VydmVyIiBkb2VzIG5vdCBleGlzdC4nLCAzMzcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKV0sIGZhbHNlKTsKICAgICAgICBlY2hvICIKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgICI7CiAgICAgICAgLy8gbGluZSAzNDEKICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicHJvZmlsZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGUiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJwcm9maWxlIiBkb2VzIG5vdCBleGlzdC4nLCAzNDEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInBhcmVudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzQxKSkgewogICAgICAgICAgICAvLyBsaW5lIDM0MgogICAgICAgICAgICBlY2hvICIgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+UGFyZW50IFJlcXVlc3Q8L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiI7CiAgICAgICAgICAgIC8vIGxpbmUgMzQ3CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxSb3V0aW5nRXh0ZW5zaW9uJ10tPmdldFBhdGgoIl9wcm9maWxlciIsIFsidG9rZW4iID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInByb2ZpbGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsicHJvZmlsZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGUiIGRvZXMgbm90IGV4aXN0LicsIDM0NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicGFyZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNDcpLCAidG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM0NyldKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiXCI+UmV0dXJuIHRvIHBhcmVudCByZXF1ZXN0PC9hPgogICAgICAgICAgICAgICAgICAgIDxzbWFsbD4odG9rZW4gPSAiOwogICAgICAgICAgICAvLyBsaW5lIDM0OAogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicHJvZmlsZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGUiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJwcm9maWxlIiBkb2VzIG5vdCBleGlzdC4nLCAzNDgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInBhcmVudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzQ4KSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNDgpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICIpPC9zbWFsbD4KICAgICAgICAgICAgICAgIDwvaDM+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSAzNTEKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZyIsIFsiYmFnIiA9PiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInByb2ZpbGUiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcm9maWxlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicHJvZmlsZSIgZG9lcyBub3QgZXhpc3QuJywgMzUxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJwYXJlbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1MSksICJnZXRjb2xsZWN0b3IiLCBbMCA9PiAicmVxdWVzdCJdLCAibWV0aG9kIiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzUxKSwgInJlcXVlc3RhdHRyaWJ1dGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNTEpXSwgZmFsc2UpOwogICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAzNTUKICAgICAgICBlY2hvICIKICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMzU2CiAgICAgICAgaWYgKHR3aWdfbGVuZ3RoX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInByb2ZpbGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsicHJvZmlsZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGUiIGRvZXMgbm90IGV4aXN0LicsIDM1NiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2hpbGRyZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1NikpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMzU3CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5TdWIgUmVxdWVzdHMgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPiI7CiAgICAgICAgICAgIC8vIGxpbmUgMzU4CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfbGVuZ3RoX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInByb2ZpbGUiLCAkY29udGV4dCkgPyAkY29udGV4dFsicHJvZmlsZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGUiIGRvZXMgbm90IGV4aXN0LicsIDM1OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2hpbGRyZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1OCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+PC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSAzNjEKICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAkY29udGV4dFsnX3NlcSddID0gdHdpZ19lbnN1cmVfdHJhdmVyc2FibGUodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicHJvZmlsZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGUiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJwcm9maWxlIiBkb2VzIG5vdCBleGlzdC4nLCAzNjEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNoaWxkcmVuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjEpKTsKICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiX2tleSJdID0+ICRjb250ZXh0WyJjaGlsZCJdKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM2MgogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM2MwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2NhbGxfbWFjcm8oJG1hY3Jvc1siaGVscGVyIl0sICJtYWNyb19zZXRfaGFuZGxlciIsIFt0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJjaGlsZCJdLCAiZ2V0Y29sbGVjdG9yIiwgWzAgPT4gInJlcXVlc3QiXSwgIm1ldGhvZCIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM2MyksICJjb250cm9sbGVyIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjMpXSwgMzYzLCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPih0b2tlbiA9IDxhIGhyZWY9XCIiOwogICAgICAgICAgICAgICAgLy8gbGluZSAzNjQKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxSb3V0aW5nRXh0ZW5zaW9uJ10tPmdldFBhdGgoIl9wcm9maWxlciIsIFsidG9rZW4iID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsiY2hpbGQiXSwgInRva2VuIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjQpXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJjaGlsZCJdLCAidG9rZW4iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM2NCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlY2hvICI8L2E+KTwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgPC9oMz4KCiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzY3CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfaW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnIiwgWyJiYWciID0+IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImNoaWxkIl0sICJnZXRjb2xsZWN0b3IiLCBbMCA9PiAicmVxdWVzdCJdLCAibWV0aG9kIiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzY3KSwgInJlcXVlc3RhdHRyaWJ1dGVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNjcpXSwgZmFsc2UpOwogICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRfcGFyZW50ID0gJGNvbnRleHRbJ19wYXJlbnQnXTsKICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnX2tleSddLCAkY29udGV4dFsnY2hpbGQnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICRjb250ZXh0ID0gYXJyYXlfaW50ZXJzZWN0X2tleSgkY29udGV4dCwgJF9wYXJlbnQpICsgJF9wYXJlbnQ7CiAgICAgICAgICAgIC8vIGxpbmUgMzY5CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzcyCiAgICAgICAgZWNobyAiICAgIDwvZGl2PgoiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgogICAgfQoKICAgIC8vIGxpbmUgMzc1CiAgICBwdWJsaWMgZnVuY3Rpb24gbWFjcm9fc2V0X2hhbmRsZXIoJF9fY29udHJvbGxlcl9fID0gbnVsbCwgJF9fcm91dGVfXyA9IG51bGwsICRfX21ldGhvZF9fID0gbnVsbCwgLi4uJF9fdmFyYXJnc19fKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRjb250ZXh0ID0gJHRoaXMtPmVudi0+bWVyZ2VHbG9iYWxzKFsKICAgICAgICAgICAgImNvbnRyb2xsZXIiID0+ICRfX2NvbnRyb2xsZXJfXywKICAgICAgICAgICAgInJvdXRlIiA9PiAkX19yb3V0ZV9fLAogICAgICAgICAgICAibWV0aG9kIiA9PiAkX19tZXRob2RfXywKICAgICAgICAgICAgInZhcmFyZ3MiID0+ICRfX3ZhcmFyZ3NfXywKICAgICAgICBdKTsKCiAgICAgICAgJGJsb2NrcyA9IFtdOwoKICAgICAgICBvYl9zdGFydCgpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+ZW50ZXIoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAibWFjcm8iLCAic2V0X2hhbmRsZXIiKSk7CgogICAgICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5lbnRlcigkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJtYWNybyIsICJzZXRfaGFuZGxlciIpKTsKCiAgICAgICAgICAgIC8vIGxpbmUgMzc2CiAgICAgICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgICAgICBpZiAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29udHJvbGxlciJdID8/IG51bGwpLCAiY2xhc3MiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAzNzYpKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM3NwogICAgICAgICAgICAgICAgaWYgKCgoYXJyYXlfa2V5X2V4aXN0cygibWV0aG9kIiwgJGNvbnRleHQpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcigoaXNzZXQoJGNvbnRleHRbIm1ldGhvZCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJtZXRob2QiLCAkY29udGV4dCkgPyAkY29udGV4dFsibWV0aG9kIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibWV0aG9kIiBkb2VzIG5vdCBleGlzdC4nLCAzNzcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgZmFsc2UpKSA6IChmYWxzZSkpKSB7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXJlZGlyZWN0aW9uLW1ldGhvZFwiPiI7CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJtZXRob2QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibWV0aG9kIiwgJGNvbnRleHQpID8gJGNvbnRleHRbIm1ldGhvZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgIm1ldGhvZCIgZG9lcyBub3QgZXhpc3QuJywgMzc3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9zcGFuPiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM3OAogICAgICAgICAgICAgICAgJGNvbnRleHRbImxpbmsiXSA9ICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxDb2RlRXh0ZW5zaW9uJ10tPmdldEZpbGVMaW5rKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbnRyb2xsZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29udHJvbGxlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb250cm9sbGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29udHJvbGxlciIgZG9lcyBub3QgZXhpc3QuJywgMzc4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJmaWxlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNzgpLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb250cm9sbGVyIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRyb2xsZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udHJvbGxlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRyb2xsZXIiIGRvZXMgbm90IGV4aXN0LicsIDM3OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibGluZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzc4KSk7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM3OQogICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsibGluayJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5rIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxpbmsiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJsaW5rIiBkb2VzIG5vdCBleGlzdC4nLCAzNzksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIjxhIGhyZWY9XCIiOwogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsibGluayJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5rIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxpbmsiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJsaW5rIiBkb2VzIG5vdCBleGlzdC4nLCAzNzksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIiB0aXRsZT1cIiI7CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29udHJvbGxlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb250cm9sbGVyIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbnRyb2xsZXIiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb250cm9sbGVyIiBkb2VzIG5vdCBleGlzdC4nLCAzNzksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNsYXNzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNzkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIjxzcGFuIHRpdGxlPVwiIjsKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb250cm9sbGVyIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRyb2xsZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udHJvbGxlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRyb2xsZXIiIGRvZXMgbm90IGV4aXN0LicsIDM3OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2xhc3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM3OSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiXCI+IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGxpbmUgMzgxCiAgICAgICAgICAgICAgICBpZiAoKChhcnJheV9rZXlfZXhpc3RzKCJyb3V0ZSIsICRjb250ZXh0KSkgPyAoX3R3aWdfZGVmYXVsdF9maWx0ZXIoKGlzc2V0KCRjb250ZXh0WyJyb3V0ZSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyb3V0ZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyb3V0ZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJvdXRlIiBkb2VzIG5vdCBleGlzdC4nLCAzODEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgZmFsc2UpKSA6IChmYWxzZSkpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAzODIKICAgICAgICAgICAgICAgICAgICBlY2hvICJAIjsKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInJvdXRlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInJvdXRlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJvdXRlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicm91dGUiIGRvZXMgbm90IGV4aXN0LicsIDM4MiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDM4NAogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHN0cmlwX3RhZ3MoJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXENvZGVFeHRlbnNpb24nXS0+YWJickNsYXNzKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbnRyb2xsZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29udHJvbGxlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb250cm9sbGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29udHJvbGxlciIgZG9lcyBub3QgZXhpc3QuJywgMzg0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjbGFzcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzg0KSkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzg1CiAgICAgICAgICAgICAgICAgICAgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb250cm9sbGVyIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRyb2xsZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udHJvbGxlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRyb2xsZXIiIGRvZXMgbm90IGV4aXN0LicsIDM4NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibWV0aG9kIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzODUpKSA/IChwcmludCAodHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgiIDo6ICIgLiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb250cm9sbGVyIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRyb2xsZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udHJvbGxlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRyb2xsZXIiIGRvZXMgbm90IGV4aXN0LicsIDM4NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibWV0aG9kIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzODUpKSwgImh0bWwiLCBudWxsLCB0cnVlKSkpIDogKHByaW50ICgiIikpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGxpbmUgMzg4CiAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJsaW5rIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImxpbmsiLCAkY29udGV4dCkgPyAkY29udGV4dFsibGluayJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxpbmsiIGRvZXMgbm90IGV4aXN0LicsIDM4OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9hPiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gbGluZSAzOTAKICAgICAgICAgICAgICAgIGVjaG8gIjxzcGFuPiI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoKGFycmF5X2tleV9leGlzdHMoInJvdXRlIiwgJGNvbnRleHQpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcigoaXNzZXQoJGNvbnRleHRbInJvdXRlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInJvdXRlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJvdXRlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicm91dGUiIGRvZXMgbm90IGV4aXN0LicsIDM5MCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAoaXNzZXQoJGNvbnRleHRbImNvbnRyb2xsZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29udHJvbGxlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb250cm9sbGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29udHJvbGxlciIgZG9lcyBub3QgZXhpc3QuJywgMzkwLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpKSA6ICgoaXNzZXQoJGNvbnRleHRbImNvbnRyb2xsZXIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29udHJvbGxlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb250cm9sbGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29udHJvbGxlciIgZG9lcyBub3QgZXhpc3QuJywgMzkwLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgoKICAgICAgICAgICAgcmV0dXJuICgnJyA9PT0gJHRtcCA9IG9iX2dldF9jb250ZW50cygpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIG9iX2VuZF9jbGVhbigpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVOYW1lKCkKICAgIHsKICAgICAgICByZXR1cm4gIkBXZWJQcm9maWxlci9Db2xsZWN0b3IvcmVxdWVzdC5odG1sLnR3aWciOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBpc1RyYWl0YWJsZSgpCiAgICB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXREZWJ1Z0luZm8oKQogICAgewogICAgICAgIHJldHVybiBhcnJheSAoICA5MjYgPT4gMzkwLCAgOTE5ID0+IDM4OCwgIDkxNiA9PiAzODUsICA5MTQgPT4gMzg0LCAgOTEwID0+IDM4MiwgIDkwOCA9PiAzODEsICA4OTYgPT4gMzc5LCAgODk0ID0+IDM3OCwgIDg4OCA9PiAzNzcsICA4ODUgPT4gMzc2LCAgODY0ID0+IDM3NSwgIDg1MyA9PiAzNzIsICA4NDggPT4gMzY5LCAgODQwID0+IDM2NywgIDgzMiA9PiAzNjQsICA4MjggPT4gMzYzLCAgODI1ID0+IDM2MiwgIDgyMSA9PiAzNjEsICA4MTUgPT4gMzU4LCAgODEyID0+IDM1NywgIDgxMCA9PiAzNTYsICA4MDcgPT4gMzU1LCAgODAwID0+IDM1MSwgIDc5NCA9PiAzNDgsICA3OTAgPT4gMzQ3LCAgNzgzID0+IDM0MiwgIDc4MSA9PiAzNDEsICA3NzMgPT4gMzM3LCAgNzY3ID0+IDMzNiwgIDc2NCA9PiAzMzUsICA3NTkgPT4gMzM0LCAgNzU3ID0+IDMzMywgIDc1MSA9PiAzMzAsICA3NDEgPT4gMzIyLCAgNzM1ID0+IDMyMCwgIDcyOSA9PiAzMTYsICA3MjcgPT4gMzE1LCAgNzE4ID0+IDMwOSwgIDcxMyA9PiAzMDYsICA3MDggPT4gMzAzLCAgNjk3ID0+IDI5OCwgIDY5MyA9PiAyOTcsICA2ODcgPT4gMjk1LCAgNjg1ID0+IDI5NCwgIDY4MiA9PiAyOTMsICA2NzYgPT4gMjkyLCAgNjczID0+IDI5MSwgIDY2MSA9PiAyOTAsICA2NTkgPT4gMjg5LCAgNjU2ID0+IDI4NywgIDY1MiA9PiAyODYsICA2NDIgPT4gMjc4LCAgNjM2ID0+IDI3NCwgIDYzNCA9PiAyNzMsICA2MjYgPT4gMjY4LCAgNjE4ID0+IDI2MywgIDYxMSA9PiAyNTgsICA2MDUgPT4gMjU2LCAgNTk5ID0+IDI1MiwgIDU5NyA9PiAyNTEsICA1OTIgPT4gMjQ4LCAgNTg2ID0+IDI0NiwgIDU4MCA9PiAyNDIsICA1NzggPT4gMjQxLCAgNTY2ID0+IDIzNiwgIDU2MiA9PiAyMzUsICA1NTcgPT4gMjMyLCAgNTUxID0+IDIzMCwgIDU0NSA9PiAyMjYsICA1NDMgPT4gMjI1LCAgNTM4ID0+IDIyMiwgIDUzMiA9PiAyMjAsICA1MjYgPT4gMjE2LCAgNTI0ID0+IDIxNSwgIDUxNSA9PiAyMDksICA1MDggPT4gMjA1LCAgNDk3ID0+IDE5NiwgIDQ5MSA9PiAxOTIsICA0ODIgPT4gMTg2LCAgNDc1ID0+IDE4MSwgIDQ2NyA9PiAxNzYsICA0NjEgPT4gMTcyLCAgNDU4ID0+IDE3MSwgIDQ1NiA9PiAxNzAsICA0NTMgPT4gMTY5LCAgNDUxID0+IDE2OCwgIDQ0NiA9PiAxNjUsICA0NDQgPT4gMTY0LCAgNDM3ID0+IDE2MCwgIDQzMyA9PiAxNTgsICA0MjcgPT4gMTU2LCAgNDIxID0+IDE1MiwgIDQxOSA9PiAxNTEsICA0MTQgPT4gMTQ4LCAgNDA4ID0+IDE0NiwgIDQwMiA9PiAxNDIsICA0MDAgPT4gMTQxLCAgMzk1ID0+IDEzOCwgIDM4OSA9PiAxMzYsICAzODMgPT4gMTMyLCAgMzgxID0+IDEzMSwgIDM3NiA9PiAxMjgsICAzNzAgPT4gMTI2LCAgMzY0ID0+IDEyMiwgIDM2MiA9PiAxMjEsICAzNDkgPT4gMTExLCAgMzQ1ID0+IDEwOSwgIDM0MiA9PiAxMDgsICAzMzIgPT4gMTA3LCAgMzE4ID0+IDEwMiwgIDMxNSA9PiAxMDEsICAzMDUgPT4gMTAwLCAgMjkzID0+IDk3LCAgMjkwID0+IDk2LCAgMjg3ID0+IDk1LCAgMjc3ID0+IDkwLCAgMjczID0+IDg5LCAgMjY3ID0+IDg1LCAgMjY1ID0+IDg0LCAgMjYyID0+IDgzLCAgMjUyID0+IDc4LCAgMjQ4ID0+IDc3LCAgMjQxID0+IDczLCAgMjM2ID0+IDcwLCAgMjM0ID0+IDY5LCAgMjIzID0+IDY1LCAgMjExID0+IDYwLCAgMjAzID0+IDU1LCAgMTk1ID0+IDUwLCAgMTkwID0+IDQ3LCAgMTg1ID0+IDQ0LCAgMTgxID0+IDQyLCAgMTc5ID0+IDQxLCAgMTcxID0+IDM4LCAgMTY2ID0+IDM1LCAgMTY0ID0+IDM0LCAgMTYxID0+IDMzLCAgMTU4ID0+IDMyLCAgMTUzID0+IDMwLCAgMTQ4ID0+IDI5LCAgMTQzID0+IDI4LCAgMTM4ID0+IDI3LCAgMTM2ID0+IDI2LCAgMTI5ID0+IDI1LCAgMTI3ID0+IDI0LCAgMTI0ID0+IDIzLCAgMTIyID0+IDIyLCAgMTE5ID0+IDIxLCAgMTE2ID0+IDIwLCAgMTEwID0+IDE4LCAgMTA3ID0+IDE3LCAgMTA0ID0+IDE2LCAgMTAyID0+IDE1LCAgOTkgPT4gMTQsICA5NiA9PiAxMywgIDkwID0+IDExLCAgODcgPT4gMTAsICA4NSA9PiA5LCAgODIgPT4gOCwgIDc2ID0+IDYsICA3MyA9PiA1LCAgNzAgPT4gNCwgIDYwID0+IDMsICAzNyA9PiAxLCk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGdldFNvdXJjZUNvbnRleHQoKQogICAgewogICAgICAgIHJldHVybiBuZXcgU291cmNlKCJ7JSBleHRlbmRzICdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvbGF5b3V0Lmh0bWwudHdpZycgJX0KCnslIGJsb2NrIHRvb2xiYXIgJX0KICAgIHslIGltcG9ydCBfc2VsZiBhcyBoZWxwZXIgJX0KICAgIHslIHNldCByZXF1ZXN0X2hhbmRsZXIgJX0KICAgICAgICB7eyBoZWxwZXIuc2V0X2hhbmRsZXIoY29sbGVjdG9yLmNvbnRyb2xsZXIpIH19CiAgICB7JSBlbmRzZXQgJX0KCiAgICB7JSBpZiBjb2xsZWN0b3IucmVkaXJlY3QgJX0KICAgICAgICB7JSBzZXQgcmVkaXJlY3RfaGFuZGxlciAlfQogICAgICAgICAgICB7eyBoZWxwZXIuc2V0X2hhbmRsZXIoY29sbGVjdG9yLnJlZGlyZWN0LmNvbnRyb2xsZXIsIGNvbGxlY3Rvci5yZWRpcmVjdC5yb3V0ZSwgJ0dFVCcgIT0gY29sbGVjdG9yLnJlZGlyZWN0Lm1ldGhvZCA/IGNvbGxlY3Rvci5yZWRpcmVjdC5tZXRob2QpIH19CiAgICAgICAgeyUgZW5kc2V0ICV9CiAgICB7JSBlbmRpZiAlfQoKICAgIHslIGlmIGNvbGxlY3Rvci5mb3J3YXJkdG9rZW4gJX0KICAgICAgICB7JSBzZXQgZm9yd2FyZF9wcm9maWxlID0gcHJvZmlsZS5jaGlsZEJ5VG9rZW4oY29sbGVjdG9yLmZvcndhcmR0b2tlbikgJX0KICAgICAgICB7JSBzZXQgZm9yd2FyZF9oYW5kbGVyICV9CiAgICAgICAgICAgIHt7IGhlbHBlci5zZXRfaGFuZGxlcihmb3J3YXJkX3Byb2ZpbGUgPyBmb3J3YXJkX3Byb2ZpbGUuY29sbGVjdG9yKCdyZXF1ZXN0JykuY29udHJvbGxlciA6ICduL2EnKSB9fQogICAgICAgIHslIGVuZHNldCAlfQogICAgeyUgZW5kaWYgJX0KCiAgICB7JSBzZXQgcmVxdWVzdF9zdGF0dXNfY29kZV9jb2xvciA9IChjb2xsZWN0b3Iuc3RhdHVzY29kZSA+PSA0MDApID8gJ3JlZCcgOiAoY29sbGVjdG9yLnN0YXR1c2NvZGUgPj0gMzAwKSA/ICd5ZWxsb3cnIDogJ2dyZWVuJyAlfQoKICAgIHslIHNldCBpY29uICV9CiAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy17eyByZXF1ZXN0X3N0YXR1c19jb2RlX2NvbG9yIH19XCI+e3sgY29sbGVjdG9yLnN0YXR1c2NvZGUgfX08L3NwYW4+CiAgICAgICAgeyUgaWYgY29sbGVjdG9yLnJvdXRlICV9CiAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5yZWRpcmVjdCAlfXt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9JY29uL3JlZGlyZWN0LnN2ZycpIH19eyUgZW5kaWYgJX0KICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLmZvcndhcmR0b2tlbiAlfXt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9JY29uL2ZvcndhcmQuc3ZnJykgfX17JSBlbmRpZiAlfQogICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItbGFiZWxcIj57eyAnR0VUJyAhPSBjb2xsZWN0b3IubWV0aG9kID8gY29sbGVjdG9yLm1ldGhvZCB9fSBAPC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWUgc2YtdG9vbGJhci1pbmZvLXBpZWNlLWFkZGl0aW9uYWxcIj57eyBjb2xsZWN0b3Iucm91dGUgfX08L3NwYW4+CiAgICAgICAgeyUgZW5kaWYgJX0KICAgIHslIGVuZHNldCAlfQoKICAgIHslIHNldCB0ZXh0ICV9CiAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1ncm91cFwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5IVFRQIHN0YXR1czwvYj4KICAgICAgICAgICAgICAgIDxzcGFuPnt7IGNvbGxlY3Rvci5zdGF0dXNjb2RlIH19IHt7IGNvbGxlY3Rvci5zdGF0dXN0ZXh0IH19PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIHslIGlmICdHRVQnICE9IGNvbGxlY3Rvci5tZXRob2QgLSV9CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+TWV0aG9kPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IGNvbGxlY3Rvci5tZXRob2QgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgeyUtIGVuZGlmICV9CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5Db250cm9sbGVyPC9iPgogICAgICAgICAgICAgICAgPHNwYW4+e3sgcmVxdWVzdF9oYW5kbGVyIH19PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPlJvdXRlIG5hbWU8L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj57eyBjb2xsZWN0b3Iucm91dGV8ZGVmYXVsdCgnbi9hJykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+SGFzIHNlc3Npb248L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj57JSBpZiBjb2xsZWN0b3Iuc2Vzc2lvbm1ldGFkYXRhfGxlbmd0aCAlfXllc3slIGVsc2UgJX1ub3slIGVuZGlmICV9PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPlN0YXRlbGVzcyBDaGVjazwvYj4KICAgICAgICAgICAgICAgIDxzcGFuPnslIGlmIGNvbGxlY3Rvci5zdGF0ZWxlc3NjaGVjayAlfXllc3slIGVsc2UgJX1ub3slIGVuZGlmICV9PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgeyUgaWYgcmVkaXJlY3RfaGFuZGxlciBpcyBkZWZpbmVkIC0lfQogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLWdyb3VwXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1yZWRpcmVjdGlvbi1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMteWVsbG93XCI+e3sgY29sbGVjdG9yLnJlZGlyZWN0LnN0YXR1c19jb2RlIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICBSZWRpcmVjdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICB7eyByZWRpcmVjdF9oYW5kbGVyIH19CiAgICAgICAgICAgICAgICAgICAgICAgICg8YSBocmVmPVwie3sgcGF0aCgnX3Byb2ZpbGVyJywgeyB0b2tlbjogY29sbGVjdG9yLnJlZGlyZWN0LnRva2VuIH0pIH19XCI+e3sgY29sbGVjdG9yLnJlZGlyZWN0LnRva2VuIH19PC9hPikKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgeyUgaWYgZm9yd2FyZF9oYW5kbGVyIGlzIGRlZmluZWQgJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1ncm91cFwiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxiPkZvcndhcmRlZCB0bzwvYj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAge3sgZm9yd2FyZF9oYW5kbGVyIH19CiAgICAgICAgICAgICAgICAgICAgICAgICg8YSBocmVmPVwie3sgcGF0aCgnX3Byb2ZpbGVyJywgeyB0b2tlbjogY29sbGVjdG9yLmZvcndhcmR0b2tlbiB9KSB9fVwiPnt7IGNvbGxlY3Rvci5mb3J3YXJkdG9rZW4gfX08L2E+KQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICB7JSBlbmRpZiAlfQogICAgeyUgZW5kc2V0ICV9CgogICAge3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL3Rvb2xiYXJfaXRlbS5odG1sLnR3aWcnLCB7IGxpbms6IHByb2ZpbGVyX3VybCB9KSB9fQp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgbWVudSAlfQogICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPgogICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiPnt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9JY29uL3JlcXVlc3Quc3ZnJykgfX08L3NwYW4+CiAgICAgICAgPHN0cm9uZz5SZXF1ZXN0IC8gUmVzcG9uc2U8L3N0cm9uZz4KICAgIDwvc3Bhbj4KeyUgZW5kYmxvY2sgJX0KCnslIGJsb2NrIHBhbmVsICV9CiAgICB7JSBpbXBvcnQgX3NlbGYgYXMgaGVscGVyICV9CgogICAgPGgyPgogICAgICAgIHt7IGhlbHBlci5zZXRfaGFuZGxlcihjb2xsZWN0b3IuY29udHJvbGxlcikgfX0KICAgIDwvaDI+CgogICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIj4KICAgICAgICA8ZGl2IGNsYXNzPVwidGFiXCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlJlcXVlc3Q8L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICA8aDM+R0VUIFBhcmFtZXRlcnM8L2gzPgoKICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5yZXF1ZXN0cXVlcnkuYWxsIGlzIGVtcHR5ICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIEdFVCBwYXJhbWV0ZXJzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnJywgeyBiYWc6IGNvbGxlY3Rvci5yZXF1ZXN0cXVlcnksIG1heERlcHRoOiAxIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICA8aDM+UE9TVCBQYXJhbWV0ZXJzPC9oMz4KCiAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IucmVxdWVzdHJlcXVlc3QuYWxsIGlzIGVtcHR5ICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIFBPU1QgcGFyYW1ldGVyczwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZycsIHsgYmFnOiBjb2xsZWN0b3IucmVxdWVzdHJlcXVlc3QsIG1heERlcHRoOiAxIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICA8aDQ+VXBsb2FkZWQgRmlsZXM8L2g0PgoKICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5yZXF1ZXN0ZmlsZXMgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gZmlsZXMgd2VyZSB1cGxvYWRlZDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZycsIHsgYmFnOiBjb2xsZWN0b3IucmVxdWVzdGZpbGVzLCBtYXhEZXB0aDogMSB9LCB3aXRoX2NvbnRleHQgPSBmYWxzZSkgfX0KICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgQXR0cmlidXRlczwvaDM+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnJlcXVlc3RhdHRyaWJ1dGVzLmFsbCBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBhdHRyaWJ1dGVzPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnJywgeyBiYWc6IGNvbGxlY3Rvci5yZXF1ZXN0YXR0cmlidXRlcyB9LCB3aXRoX2NvbnRleHQgPSBmYWxzZSkgfX0KICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgSGVhZGVyczwvaDM+CiAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZycsIHsgYmFnOiBjb2xsZWN0b3IucmVxdWVzdGhlYWRlcnMsIGxhYmVsczogWydIZWFkZXInLCAnVmFsdWUnXSwgbWF4RGVwdGg6IDEgfSwgd2l0aF9jb250ZXh0ID0gZmFsc2UpIH19CgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgQ29udGVudDwvaDM+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLmNvbnRlbnQgPT0gZmFsc2UgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVxdWVzdCBjb250ZW50IG5vdCBhdmFpbGFibGUgKGl0IHdhcyByZXRyaWV2ZWQgYXMgYSByZXNvdXJjZSkuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZWlmIGNvbGxlY3Rvci5jb250ZW50ICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgeyUgc2V0IHByZXR0eUpzb24gPSBjb2xsZWN0b3IuaXNKc29uUmVxdWVzdCA/IGNvbGxlY3Rvci5wcmV0dHlKc29uIDogbnVsbCAlfQogICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBwcmV0dHlKc29uIGlzIG5vdCBudWxsICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlByZXR0eTwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiIHN0eWxlPVwibWF4LWhlaWdodDogNTAwcHg7IG92ZXJmbG93LXk6IGF1dG87XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmUgY2xhc3M9XCJicmVhay1sb25nLXdvcmRzXCI+e3sgcHJldHR5SnNvbiB9fTwvcHJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+UmF3PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmUgY2xhc3M9XCJicmVhay1sb25nLXdvcmRzXCI+e3sgY29sbGVjdG9yLmNvbnRlbnQgfX08L3ByZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gY29udGVudDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiXCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlJlc3BvbnNlPC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgPGgzPlJlc3BvbnNlIEhlYWRlcnM8L2gzPgoKICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnJywgeyBiYWc6IGNvbGxlY3Rvci5yZXNwb25zZWhlYWRlcnMsIGxhYmVsczogWydIZWFkZXInLCAnVmFsdWUnXSwgbWF4RGVwdGg6IDEgfSwgd2l0aF9jb250ZXh0ID0gZmFsc2UpIH19CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiIHt7IGNvbGxlY3Rvci5yZXF1ZXN0Y29va2llcy5hbGwgaXMgZW1wdHkgYW5kIGNvbGxlY3Rvci5yZXNwb25zZWNvb2tpZXMuYWxsIGlzIGVtcHR5ID8gJ2Rpc2FibGVkJyB9fVwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5Db29raWVzPC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgPGgzPlJlcXVlc3QgQ29va2llczwvaDM+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnJlcXVlc3Rjb29raWVzLmFsbCBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyByZXF1ZXN0IGNvb2tpZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAge3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2JhZy5odG1sLnR3aWcnLCB7IGJhZzogY29sbGVjdG9yLnJlcXVlc3Rjb29raWVzIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICA8aDM+UmVzcG9uc2UgQ29va2llczwvaDM+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnJlc3BvbnNlY29va2llcy5hbGwgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gcmVzcG9uc2UgY29va2llczwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZycsIHsgYmFnOiBjb2xsZWN0b3IucmVzcG9uc2Vjb29raWVzIH0sIHdpdGhfY29udGV4dCA9IHRydWUpIH19CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiB7eyBjb2xsZWN0b3Iuc2Vzc2lvbm1ldGFkYXRhIGlzIGVtcHR5ID8gJ2Rpc2FibGVkJyB9fVwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5TZXNzaW9ueyUgaWYgY29sbGVjdG9yLnNlc3Npb251c2FnZXMgaXMgbm90IGVtcHR5ICV9IDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj57eyBjb2xsZWN0b3Iuc2Vzc2lvbnVzYWdlc3xsZW5ndGggfX08L3NwYW4+eyUgZW5kaWYgJX08L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICA8aDM+U2Vzc2lvbiBNZXRhZGF0YTwvaDM+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnNlc3Npb25tZXRhZGF0YSBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBzZXNzaW9uIG1ldGFkYXRhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci90YWJsZS5odG1sLnR3aWcnLCB7IGRhdGE6IGNvbGxlY3Rvci5zZXNzaW9ubWV0YWRhdGEgfSwgd2l0aF9jb250ZXh0ID0gZmFsc2UpIH19CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgIDxoMz5TZXNzaW9uIEF0dHJpYnV0ZXM8L2gzPgoKICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5zZXNzaW9uYXR0cmlidXRlcyBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBzZXNzaW9uIGF0dHJpYnV0ZXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAge3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL3RhYmxlLmh0bWwudHdpZycsIHsgZGF0YTogY29sbGVjdG9yLnNlc3Npb25hdHRyaWJ1dGVzLCBsYWJlbHM6IFsnQXR0cmlidXRlJywgJ1ZhbHVlJ10gfSwgd2l0aF9jb250ZXh0ID0gZmFsc2UpIH19CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgIDxoMz5TZXNzaW9uIFVzYWdlPC9oMz4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljc1wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPnt7IGNvbGxlY3Rvci5zZXNzaW9udXNhZ2VzfGxlbmd0aCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlVzYWdlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+e3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL0ljb24vJyB+IChjb2xsZWN0b3Iuc3RhdGVsZXNzY2hlY2sgPyAneWVzJyA6ICdubycpIH4gJy5zdmcnKSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlN0YXRlbGVzcyBjaGVjayBlbmFibGVkPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLnNlc3Npb251c2FnZXMgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2Vzc2lvbiBub3QgdXNlZC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwic2Vzc2lvbl91c2FnZXNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJmdWxsLXdpZHRoXCI+VXNhZ2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3Iga2V5LCB1c2FnZSBpbiBjb2xsZWN0b3Iuc2Vzc2lvbnVzYWdlcyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslLSBzZXQgbGluayA9IHVzYWdlLmZpbGV8ZmlsZV9saW5rKHVzYWdlLmxpbmUpICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslLSBpZiBsaW5rICV9PGEgaHJlZj1cInt7IGxpbmsgfX1cIiB0aXRsZT1cInt7IHVzYWdlLm5hbWUgfX1cIj57JSBlbHNlICV9PHNwYW4gdGl0bGU9XCJ7eyB1c2FnZS5uYW1lIH19XCI+eyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHVzYWdlLm5hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUtIGlmIGxpbmsgJX08L2E+eyUgZWxzZSAlfTwvc3Bhbj57JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zbWFsbCBmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgc2V0IHVzYWdlX2lkID0gJ3Nlc3Npb24tdXNhZ2UtdHJhY2UtJyB+IGtleSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWxpbmsgdGV4dC1zbWFsbCBzZi10b2dnbGVcIiBkYXRhLXRvZ2dsZS1zZWxlY3Rvcj1cIiN7eyB1c2FnZV9pZCB9fVwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSB0cmFjZVwiPlNob3cgdHJhY2U8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwie3sgdXNhZ2VfaWQgfX1cIiBjbGFzcz1cImNvbnRleHQgc2YtdG9nZ2xlLWNvbnRlbnQgc2YtdG9nZ2xlLWhpZGRlblwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcHJvZmlsZXJfZHVtcCh1c2FnZS50cmFjZSwgbWF4RGVwdGg9MikgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiB7eyBjb2xsZWN0b3IuZmxhc2hlcyBpcyBlbXB0eSA/ICdkaXNhYmxlZCcgfX1cIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+Rmxhc2hlczwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIDxoMz5GbGFzaGVzPC9oMz4KCiAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IuZmxhc2hlcyBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBmbGFzaCBtZXNzYWdlcyB3ZXJlIGNyZWF0ZWQuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci90YWJsZS5odG1sLnR3aWcnLCB7IGRhdGE6IGNvbGxlY3Rvci5mbGFzaGVzIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+U2VydmVyIFBhcmFtZXRlcnM8L2gzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIDxoMz5TZXJ2ZXIgUGFyYW1ldGVyczwvaDM+CiAgICAgICAgICAgICAgICA8aDQ+RGVmaW5lZCBpbiAuZW52PC9oND4KICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnJywgeyBiYWc6IGNvbGxlY3Rvci5kb3RlbnZ2YXJzIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQoKICAgICAgICAgICAgICAgIDxoND5EZWZpbmVkIGFzIHJlZ3VsYXIgZW52IHZhcmlhYmxlczwvaDQ+CiAgICAgICAgICAgICAgICB7JSBzZXQgcmVxdWVzdHNlcnZlciA9IFtdICV9CiAgICAgICAgICAgICAgICB7JSBmb3Iga2V5LCB2YWx1ZSBpbiBjb2xsZWN0b3IucmVxdWVzdHNlcnZlcnxmaWx0ZXIoKF8sIGtleSkgPT4ga2V5IG5vdCBpbiBjb2xsZWN0b3IuZG90ZW52dmFycy5rZXlzKSAlfQogICAgICAgICAgICAgICAgICAgIHslIHNldCByZXF1ZXN0c2VydmVyID0gcmVxdWVzdHNlcnZlcnxtZXJnZSh7KGtleSk6IHZhbHVlfSkgJX0KICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAge3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL3RhYmxlLmh0bWwudHdpZycsIHsgZGF0YTogcmVxdWVzdHNlcnZlciB9LCB3aXRoX2NvbnRleHQgPSBmYWxzZSkgfX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIHslIGlmIHByb2ZpbGUucGFyZW50ICV9CiAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5QYXJlbnQgUmVxdWVzdDwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwie3sgcGF0aCgnX3Byb2ZpbGVyJywgeyB0b2tlbjogcHJvZmlsZS5wYXJlbnQudG9rZW4gfSkgfX1cIj5SZXR1cm4gdG8gcGFyZW50IHJlcXVlc3Q8L2E+CiAgICAgICAgICAgICAgICAgICAgPHNtYWxsPih0b2tlbiA9IHt7IHByb2ZpbGUucGFyZW50LnRva2VuIH19KTwvc21hbGw+CiAgICAgICAgICAgICAgICA8L2gzPgoKICAgICAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9Qcm9maWxlci9iYWcuaHRtbC50d2lnJywgeyBiYWc6IHByb2ZpbGUucGFyZW50LmdldGNvbGxlY3RvcigncmVxdWVzdCcpLnJlcXVlc3RhdHRyaWJ1dGVzIH0sIHdpdGhfY29udGV4dCA9IGZhbHNlKSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICB7JSBpZiBwcm9maWxlLmNoaWxkcmVufGxlbmd0aCAlfQogICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+U3ViIFJlcXVlc3RzIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj57eyBwcm9maWxlLmNoaWxkcmVufGxlbmd0aCB9fTwvc3Bhbj48L2gzPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICB7JSBmb3IgY2hpbGQgaW4gcHJvZmlsZS5jaGlsZHJlbiAlfQogICAgICAgICAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICAgICAgICAgICAge3sgaGVscGVyLnNldF9oYW5kbGVyKGNoaWxkLmdldGNvbGxlY3RvcigncmVxdWVzdCcpLmNvbnRyb2xsZXIpIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD4odG9rZW4gPSA8YSBocmVmPVwie3sgcGF0aCgnX3Byb2ZpbGVyJywgeyB0b2tlbjogY2hpbGQudG9rZW4gfSkgfX1cIj57eyBjaGlsZC50b2tlbiB9fTwvYT4pPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICA8L2gzPgoKICAgICAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFnLmh0bWwudHdpZycsIHsgYmFnOiBjaGlsZC5nZXRjb2xsZWN0b3IoJ3JlcXVlc3QnKS5yZXF1ZXN0YXR0cmlidXRlcyB9LCB3aXRoX2NvbnRleHQgPSBmYWxzZSkgfX0KICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICB7JSBlbmRpZiAlfQogICAgPC9kaXY+CnslIGVuZGJsb2NrICV9Cgp7JSBtYWNybyBzZXRfaGFuZGxlcihjb250cm9sbGVyLCByb3V0ZSwgbWV0aG9kKSAlfQogICAgeyUgaWYgY29udHJvbGxlci5jbGFzcyBpcyBkZWZpbmVkIC0lfQogICAgICAgIHslLSBpZiBtZXRob2R8ZGVmYXVsdChmYWxzZSkgJX08c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzIHNmLXRvb2xiYXItcmVkaXJlY3Rpb24tbWV0aG9kXCI+e3sgbWV0aG9kIH19PC9zcGFuPnslIGVuZGlmIC0lfQogICAgICAgIHslLSBzZXQgbGluayA9IGNvbnRyb2xsZXIuZmlsZXxmaWxlX2xpbmsoY29udHJvbGxlci5saW5lKSAlfQogICAgICAgIHslLSBpZiBsaW5rICV9PGEgaHJlZj1cInt7IGxpbmsgfX1cIiB0aXRsZT1cInt7IGNvbnRyb2xsZXIuY2xhc3MgfX1cIj57JSBlbHNlICV9PHNwYW4gdGl0bGU9XCJ7eyBjb250cm9sbGVyLmNsYXNzIH19XCI+eyUgZW5kaWYgJX0KCiAgICAgICAgICAgIHslLSBpZiByb3V0ZXxkZWZhdWx0KGZhbHNlKSAtJX0KICAgICAgICAgICAgICAgIEB7eyByb3V0ZSB9fQogICAgICAgICAgICB7JS0gZWxzZSAtJX0KICAgICAgICAgICAgICAgIHt7LSBjb250cm9sbGVyLmNsYXNzfGFiYnJfY2xhc3N8c3RyaXB0YWdzIC19fQogICAgICAgICAgICAgICAge3stIGNvbnRyb2xsZXIubWV0aG9kID8gJyA6OiAnIH4gY29udHJvbGxlci5tZXRob2QgLX19CiAgICAgICAgICAgIHslLSBlbmRpZiAtJX0KCiAgICAgICAgeyUtIGlmIGxpbmsgJX08L2E+eyUgZWxzZSAlfTwvc3Bhbj57JSBlbmRpZiAlfQogICAgeyUtIGVsc2UgLSV9CiAgICAgICAgPHNwYW4+e3sgcm91dGV8ZGVmYXVsdChjb250cm9sbGVyKSB9fTwvc3Bhbj4KICAgIHslLSBlbmRpZiAlfQp7JSBlbmRtYWNybyAlfQoiLCAiQFdlYlByb2ZpbGVyL0NvbGxlY3Rvci9yZXF1ZXN0Lmh0bWwudHdpZyIsICJDOlxcVXNlcnNcXHNvbGluZVxcUEVSU09OTkVMXFxUUkFWQUlMXFxGT1JNQVRJT05cXFVERU1ZXFxTWU1GT05ZIDVcXE1lc1Byb2pldHNcXGxhYm91dGlxdWVmcmFuY2Fpc2VcXHZlbmRvclxcc3ltZm9ueVxcd2ViLXByb2ZpbGVyLWJ1bmRsZVxcUmVzb3VyY2VzXFx2aWV3c1xcQ29sbGVjdG9yXFxyZXF1ZXN0Lmh0bWwudHdpZyIpOwogICAgfQp9CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YToxOntzOjgwOiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMiI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjExOntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4MDoiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzIiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo3OToiX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcGFyZW50IjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTQ6IlxUd2lnXFRlbXBsYXRlIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6ODoiVGVtcGxhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AaW1wbGVtZW50cyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGNvbnN0YW50cyI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHByb3BlcnRpZXMiO2E6Mjp7czo4OToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OiRzb3VyY2UiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjg6e3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODk6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjokc291cmNlIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6Njoic291cmNlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZXMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRlZmF1bHQiO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlIjtOO31zOjg5OiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMjo6JG1hY3JvcyI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eSI6ODp7czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4OToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OiRtYWNyb3MiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo2OiJtYWNyb3MiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7czoyOiJbXSI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxOTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlIjtOO319czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGhvZHMiO2E6MTE6e3M6OTU6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpfX2NvbnN0cnVjdCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk1OiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMjo6X19jb25zdHJ1Y3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJfX2NvbnN0cnVjdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czozOiJlbnYiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNzoiXFR3aWdcRW52aXJvbm1lbnQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiRW52aXJvbm1lbnQiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmRvR2V0UGFyZW50KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTU6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpkb0dldFBhcmVudCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6ImRvR2V0UGFyZW50Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo5OiJwcm90ZWN0ZWQiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjM0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTM6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpkb0Rpc3BsYXkoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MzoiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmRvRGlzcGxheSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6OToiZG9EaXNwbGF5Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo5OiJwcm90ZWN0ZWQiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czoyOiJbXSI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjQwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTc6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpibG9ja190b29sYmFyKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTc6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpibG9ja190b29sYmFyKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMzoiYmxvY2tfdG9vbGJhciI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NjoiYmxvY2tzIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjI6IltdIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NDoiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmJsb2NrX21lbnUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NDoiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmJsb2NrX21lbnUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEwOiJibG9ja19tZW51Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMDU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmJsb2NrX3BhbmVsKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTU6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpibG9ja19wYW5lbCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6ImJsb2NrX3BhbmVsIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMzI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czoxMDE6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjptYWNyb19zZXRfaGFuZGxlcigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjEwMToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6Om1hY3JvX3NldF9oYW5kbGVyKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNzoibWFjcm9fc2V0X2hhbmRsZXIiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6NDp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTQ6Il9fY29udHJvbGxlcl9fIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czo0OiJudWxsIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6OToiX19yb3V0ZV9fIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czo0OiJudWxsIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToyO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTA6Il9fbWV0aG9kX18iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjQ6Im51bGwiO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjM7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMToiX192YXJhcmdzX18iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjoxO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4NjQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5OToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmdldFRlbXBsYXRlTmFtZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk5OiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMjo6Z2V0VGVtcGxhdGVOYW1lKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNToiZ2V0VGVtcGxhdGVOYW1lIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk0MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk1OiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMjo6aXNUcmFpdGFibGUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NToiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmlzVHJhaXRhYmxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiaXNUcmFpdGFibGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTQ4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTY6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpnZXREZWJ1Z0luZm8oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NjoiXF9fVHdpZ1RlbXBsYXRlX2QzMDQ1NmZmZGNhYTFmNjM5Yjg1Zjk1NmRmZGI3MTAxZjBkODE1YjQxNjNkZTdkYjM1ZWE5OTM1NmYzNDg5YzI6OmdldERlYnVnSW5mbygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTI6ImdldERlYnVnSW5mbyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5NTM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czoxMDA6IlxfX1R3aWdUZW1wbGF0ZV9kMzA0NTZmZmRjYWExZjYzOWI4NWY5NTZkZmRiNzEwMWYwZDgxNWI0MTYzZGU3ZGIzNWVhOTkzNTZmMzQ4OWMyOjpnZXRTb3VyY2VDb250ZXh0KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTAwOiJcX19Ud2lnVGVtcGxhdGVfZDMwNDU2ZmZkY2FhMWY2MzliODVmOTU2ZGZkYjcxMDFmMGQ4MTViNDE2M2RlN2RiMzVlYTk5MzU2ZjM0ODljMjo6Z2V0U291cmNlQ29udGV4dCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTY6ImdldFNvdXJjZUNvbnRleHQiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTU4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fX1zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AdXNlZFRyYWl0cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";